From 5d47892ea653fea57d3dfff9e7f9aedfe7719a0e Mon Sep 17 00:00:00 2001
From: matbrik <6418737+matbrik@users.noreply.github.com>
Date: Tue, 24 Sep 2024 13:11:29 +0000
Subject: [PATCH 1/3] android: alternative offset to ExceptionClear in libart
 (https://github.com/frida/frida/issues/2958)(https://github.com/frida/frida-java-bridge/issues/336)

---
 lib/android.js | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/lib/android.js b/lib/android.js
index f5dcfbe..03ba488 100644
--- a/lib/android.js
+++ b/lib/android.js
@@ -44,6 +44,7 @@ const X86_JMP_MAX_DISTANCE = 0x7fffbfff;
 const ARM64_ADRP_MAX_DISTANCE = 0xfffff000;
 
 const ENV_VTABLE_OFFSET_EXCEPTION_CLEAR = 17 * pointerSize;
+const ENV_VTABLE_OFFSET_EXCEPTION_CLEAR_ALT = 250 * pointerSize;
 const ENV_VTABLE_OFFSET_FATAL_ERROR = 18 * pointerSize;
 
 const DVM_JNI_ENV_OFFSET_SELF = 12;
@@ -259,8 +260,8 @@ function _getApi () {
 
           // Android < 6 for cloneArtMethod()
           _ZN3art6Thread14CurrentFromGdbEv: ['art::Thread::CurrentFromGdb', 'pointer', []],
-          _ZN3art6mirror6Object5CloneEPNS_6ThreadE: function (address) {
-            this['art::mirror::Object::Clone'] = new NativeFunction(address, 'pointer', ['pointer', 'pointer'], nativeFunctionOptions);
+            _ZN3art6mirror6Object5CloneEPNS_6ThreadE: function (address) {
+              this['art::mirror::Object::Clone'] = new NativeFunction(address, 'pointer', ['pointer', 'pointer'], nativeFunctionOptions);
           },
           _ZN3art6mirror6Object5CloneEPNS_6ThreadEm: function (address) {
             const clone = new NativeFunction(address, 'pointer', ['pointer', 'pointer', 'pointer'], nativeFunctionOptions);
@@ -3926,9 +3927,17 @@ const threadStateTransitionRecompilers = {
 
 function makeArtThreadStateTransitionImpl (vm, env, callback) {
   const envVtable = env.handle.readPointer();
-  const exceptionClearImpl = envVtable.add(ENV_VTABLE_OFFSET_EXCEPTION_CLEAR).readPointer();
+  let exceptionClearImpl = envVtable.add(ENV_VTABLE_OFFSET_EXCEPTION_CLEAR).readPointer();
   const nextFuncImpl = envVtable.add(ENV_VTABLE_OFFSET_FATAL_ERROR).readPointer();
-
+  if (Process.arch === 'arm64') {
+    const base = exceptionClearImpl;
+    const size = 0x150;
+    const pattern = "c0 03 5f d6"; ///ret
+    var res = Memory.scanSync(base, size, pattern)
+    if(res.length > 0){
+      exceptionClearImpl = envVtable.add(ENV_VTABLE_OFFSET_EXCEPTION_CLEAR_ALT).readPointer();
+    }
+  }
   const recompile = threadStateTransitionRecompilers[Process.arch];
   if (recompile === undefined) {
     throw new Error('Not yet implemented for ' + Process.arch);
-- 
2.47.0.windows.1

